/* 
конспект - 1

1) Base javascript 
2) opreations --> операции
3) tyization, duck typing --> типизация. утиная типизация
4) value types and reference types типы javaskript
5) objects --> обьекты
6) arrays --> массивы
7) function declaration and fuction expression -->
8) closures -->
9) lexical scoping -->

------------------------------------------------------------------------------------------------------------------------------


    основные особенности


- выполняется на виртуальной машине
- утиная типизация
- автомотическое приведение типов (например строка "пятьдесят" и строка "два" получится строка "пятдесят два")
- мультипорадигменность

------------------------------------------------------------------------------------------------------------------------------


    сравнение переменных


'10' > 3 // true
'10' > '3' // false

    === --> строгое равенство(strict equal)

3 === 3 // true
3 === '3' // false (потому что при === js берет оба значения и смотрит их типы ПРЯМО, ПО ФАКТУ)

    == --> равенство(abstact equal)

3 == '3' // true (потому что при == js приводит оба значения к одному типу и сравнивает)

------------------------------------------------------------------------------------------------------------------------------


    елементарные типы(примитивы) 


- number - 1, 2, 0.3 (числа представлены в формате float64)
- string - 'a', 'asdsd'
- coolean - true, false
- null
- undefined

------------------------------------------------------------------------------------------------------------------------------


    2) opreations --> операции


let a = parseint('123', 10);
let v = '123' * 1;
a === v;

1 + 1 //2 --------------------->!Операция '+' определена для строк и для чисел, 
1 + '1' // '11'			 операции '-', '*', '/' - определена только для чисел, но 
'1' - 1 // 0			 операции над строками более приорететные чем над числами!
'1' +- 1 // '1-1'
1 + [(пустой массив)] // '1'
1 + (1,2,3) //4
1 ----- 1 // 0 (- на - дает +. если написатьчетное кол-во минусов будет // 2)

------------------------------------------------------------------------------------------------------------------------------

    
    3) tyization


- typef - проверяет тип данных (возвращает строку с описанем типа)
- typef "asdasd" === 'стринг'
- typef new String("asdasd") === 'object'
- typef 0 === 'nomber'
- typef "true" === 'boolean'
- typef "undefined" === 'undefined'
- typef "null" === 'object'

    -)динамическая типизация 

динамическая типизация- это когда "на лету" происходит определение типа (пример: a = "hello" --> typ:string; f = 4 --> type:nomber)

function divideBy5(a) {
    return a/5;
}
divideBy5(30) // 5
divideBy5('30') // 5 (как сказано выше - операторы '-', '*', '/' - определены только для чисел.)

------------------------------------------------------------------------------------------------------------------------------


    5) objects


- обьект: new object() or {}
- обертки для примеров: boolean, number, string
- массив: new array() or {}
- функция: function() or {}
- регулярное выражение: new RegExp

-) объекты изменяемы(mutable) по своей природе:

    let obj = {};
    obj.asd = 'asd';
    console.log(obj.asd); // 'asd'

-) объекты сравниваются по ссылке:

    {} === {} // false
    let obj = {};
    obj === obj; // true

-) переменные хранят ссылки на свои объекты:

    let a = {};
    let v = a;	!тут мы 'v' присваеваем не значение 'a', а присваевает ссылку, со
    a.asd = 1;	значением как у 'v' Если попробовать их сравнить будет --> true!
    v.asd // 1

-) имена полей могут быть как строками так и числами:

????????????????????????????? говорит туда можно символ запихать и что угодно

-) объект являеться прототипом для других объектов:

????????????????????????????? говорит в цепочке наследования в конце все равно будет object

-) динамическое изменение полей:

    --) добавление полей:
    let a = {};
    a.foo = 'bar';

    --) удаление полей:
    delete a.foo; // true ------>!delete --> может удалать только поля объектов, он не может
    delete a; //false		 удалять сам объект!

------------------------------------------------------------------------------------------------------------------------------

    основные отличия объектов от элементарных типов


элементарные типы:

- приметивы неизменны:

    let str = 'asdasd';
    str.foo = 123;
    console.log(str.foo); //undefined

- примитивы сравниваются по значению:

    'asdasd' === 'asdasd' // true

- при необходимости приводятся к обьекту:

    'asd'.length // 3

------------------------------------------------------------------------------------------------------------------------------
